#include <iostream>
#include<vector>
#include <cassert>

class Fibonacci {
public:
    //Returns n element of Fibonacci numbers
    static int get(int n) {
        assert(n >= 0);
        if (n < 2)
            return n;
        int previous = 0;
        int current = 1;
        for (int i = 2; i < n + 1; ++i) {
            int new_current = current + previous;
            previous = current;
            current = new_current;
        }
        return current;
    }
    //Returns last digit of n element  
    static int get_last_digit(int n) {
        assert(n >= 1);
        if (n <= 1)
            return n;
        int* Fib = new int[n + 1];
        Fib[0] = 0;
        Fib[1] = 1;
        for (int i = 2; i < n + 1; ++i) {
            Fib[i] = (Fib[i - 1] + Fib[i - 2]) % 10;
        }
        n = Fib[n];

        // put your code here
        return n;
    }
    //Returns remainder of dividing the n-th Fibonacci number by m
    static int get_remainder(int64_t n, int m) {
        assert(n >= 1);
        assert(m >= 2);
        // put your code here
        std::vector<int> arr(6 * m);
        arr[0] = 0;
        arr[1] = 1;
        for (int i = 2; i < 6 * m; ++i) {
            arr[i] = (arr[i - 1] + arr[i - 2]) % m;
            if (arr[i - 1] == 0 && arr[i] == 1) {
                m = i - 1;
                arr.resize(i);
                break;
            }
        }
        //std::cout << n << std::endl;
        return arr[n % m];
    }
};

int main() {
    int64_t n;
    int m;
    std::cin >> n >> m;
    std::cout << Fibonacci::get_remainder(n, m) << std::endl;
    return 0;
}
